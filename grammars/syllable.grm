# Tags the elements of syllables as onsets, nuclei and codas.

import 'inventory.grm' as i;
import 'byte.grm' as b;
import 'utility.grm' as u;

sigma_star = (i.PROSODIC_SYMBOL | i.PHONEME | i.MARKUPS)*;

insert_space_resyllabification = Optimize[CDRewrite[u.Insert[" "],
                                          "", i.CONSONANT "‿", sigma_star]];

# Removes markups for elision and resyllabification.
delete_strikethrough_undertie = Optimize[u.Rewrite[u.Delete[i.STRIKETHROUGH | "‿"],
                                         sigma_star]];

# Removes the ligature tie and rewrites "i" or "u" to "j" or "w," respectively.
synizesis_cleanup = Optimize[
  CDRewrite[(("i" | "iː") : "j") |
            (("u" | "uː") : "w"), "", "͡" i.PHONEMIC_VOWEL, sigma_star] @
  CDRewrite[(("i" | "iː") : "j") |
            (("u" | "uː") : "w"), i.PHONEMIC_VOWEL "͡", "", sigma_star] @
   u.Rewrite[u.Delete["͡"], sigma_star]
 ];

## Syllable parsing.

long_nucleus = Optimize[u.Rewrite[i.LONG_VOWEL : "-", sigma_star]];

short_nucleus = Optimize[u.Rewrite[i.SHORT_VOWEL | i.UMLAUT : "U", sigma_star]];

obstruent = i.STOP | "f";
muta_cum_liquida = (obstruent i.LIQUID) - ("tl" | "dl");
onset = Optimize[
  CDRewrite[(
            # Greek names may have word-initial onsets not otherwise found in
            # Latin.
            "ks" | "mn" | "pt" | "tm" |
            # Initial s-clusters.
            ("s" (((i.VOICELESS_STOP? i.LIQUID?) - "tl") | "k"? "w"?)) |
            # Other stuff.
            "kw" | "gw" | muta_cum_liquida | i.CONSONANT
            ) : "O",
            i.BOW,
            i.NUCLEUS,
            sigma_star] @

  # Resyllabification consonants.
  CDRewrite[i.CONSONANT : "O", "", "‿", sigma_star] @

  # Mandatorily splits medial "tl" and "dl" clusters into coda/onset.
  CDRewrite["l" : "O", "t" | "d", i.NUCLEUS, sigma_star] @
  # Optionally (and with non-zero cost) splits other muta cum liquida clusters
  # into coda/onset. Note that this does not need to mention the prohibition
  # on "tl" and "dl" because such clusters were already mandatorily split by
  # the previous rule.
  CDRewrite[i.LIQUID : "O" <1>,
            obstruent,
            i.NUCLEUS,
            sigma_star,
            'rtl',
            'opt'] @
  # Mandatorily parses remaining muta cum liquida clusters, labiovelars, and
  # single consonants as onsets.
  CDRewrite[(muta_cum_liquida | "kw" | "gw" | "sw" | i.CONSONANT) : "O",
            "",
            i.NUCLEUS,
            sigma_star,
            'rtl',
            'obl']
];

coda = Optimize[u.Rewrite[i.CONSONANT+ : "C", sigma_star]];

export SYLLABLE = Optimize[insert_space_resyllabification @
                           delete_strikethrough_undertie @ synizesis_cleanup @
                           long_nucleus @ short_nucleus @ onset @ coda];

## Tests syllable parsing.
test_syllable_1 = AssertEqual[
  "arma wirũːkwe kanoː trojjaj kwiː priːmus ab oːris" @ SYLLABLE,
  "UCOU OUO-OU OUO- OUCOUC O- O-OUC UC -OUC"
];
test_syllable_2 = AssertEqual[
  "temperet aː lakrimiːs et jãː noks uːmida kajloː" @ SYLLABLE,
  "OUCOUOUC - OUOUO-C UC O- OUC -OUOU OUCO-"
];
test_syllable_3 = AssertEqual[
  "ajraːtoːs jamkwe ekskiːsaː trabe firma kawaːwit" @ SYLLABLE,
  "UCO-O-C OUCOU UCO-O- OUOU OUCOU OUO-OUC"
];
test_syllable_4 = AssertEqual[
  "juːdikiũː paridis spreːtajkwe injuːria formaj" @ SYLLABLE,
  "O-OUOU- OUOUOUC O-OUCOU UCO-OUU OUCOUC"
];
test_syllable_5 = AssertEqual[
  "faːs awt ille sinit superiː reːŋnaːtor olumpiː" @ SYLLABLE,
  "O-C UC UCOU OUOUC OUOUO- O-CO-OUC UOUCO-"
];
test_syllable_6 = AssertEqual[
  "tũː bitiaj dedit iŋkrepitaːns ille impiger hawsit" @ SYLLABLE,
  "O- OUOUUC OUOUC UCOUOUO-C UCOU UCOUOUC OUCOUC"
];
test_syllable_7 = AssertEqual[
  "hajret et interdũː gremioː fowet iːnskia diːdoː" @ SYLLABLE,
  "OUCOUC UC UCOUCO- OUOU- OUOUC -COUU O-O-"
];
test_syllable_8 = AssertEqual[
  "kũː wenit awlajiːs jãː seː reːgiːna superbiːs" @ SYLLABLE,
  "O- OUOUC UCOUO-C O- O- O-O-OU OUOUCO-C"
];

# Testing that word initial sC (s consonant) is an onset but a medial sC splits
# into coda onset.
test_sc_1 = AssertEqual[
  "impulerit tantajnanimiːs kajlestibu siːraj" @ SYLLABLE,
  "UCOUOUOUC OUCOUCOUOUO-C OUCOUCOUOU O-OUC"
];

# Testing that word initial ks is an onset.
test_ks_1 = AssertEqual[
  "paːbula gustaːssent trojjaj ksantũːkwe bibissent" @ SYLLABLE,
  "O-OUOU OUCO-COUC OUCOUC OUCO-OU OUOUCOUC"
];

# Testing that medial ks splits into coda onset.
test_ks_2 = AssertEqual[
  "uːnius ob noksãː et furiaːs ajjaːkis oiːleiː" @ SYLLABLE,
  "-OUUC UC OUCO- UC OUOU-C UCO-OUC U-OU-"
];

## Tests syllable parsing on variable rule markups.

test_syllable_resyllabify = AssertEqual[
  "ab‿oris" @ SYLLABLE,
  "U OUOUC"
];
test_syllable_elision = AssertEqual[
  "multũ̶ː̶ ̶ille" @ SYLLABLE,
  "OUCOUCOU"
];
test_syllable_h_deletion = AssertEqual[
  "fuit‿h̶ok" @ SYLLABLE,
  "OUU OUC"
];
test_syllable_synizesis_1 = AssertEqual[
  "su͡aːsit" @ SYLLABLE,
  "O-OUC"
];
test_syllable_synizesis_2 = AssertEqual[
  "laːwiːni͡akwe" @ SYLLABLE,
  "O-O-COUOU"
];
test_syllable_synizesis_3 = AssertEqual[
  "awre͡iːs" @ SYLLABLE,
  "UCOUC"
];
test_diaeresis_1 = AssertEqual[
  "troːïa" @ SYLLABLE,
  "O-UU"
];
