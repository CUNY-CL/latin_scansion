# Converts normalized Latin lines to its broad phonetic transcription.

import 'byte.grm' as b;

# Note: the Romans never used "v" or "j," but some secondary sources do.
grapheme = 
    "a" | "b" | "c" | "d" | "e" | "f" | "g" |
    "h" | "i" | "j" | "k" | "l" | "m" | "n" |
    "o" | "p" | "q" | "r" | "s" | "t" | "u" |
    "v" | "w" | "x" | "y" | "z" | "ā" | "ē" |
    "ī" | "ō" | "ū" | b.kSpace;

phoneme = 
    "a" | "aː" | "ãː" | "b" | "d" | "e" | "eː" | 
    "ẽː" | "f" | "g" | "h" | "i" | "iː" | "ĩː" |
    "j" | "k" | "kw" | "l" | "m" | "n" | "ŋ" |
    "o" | "oː" | "õː" | "p" | "r" | "s" | "t" |
    "u" | "uː" | "ũː" | "w" | "z" | b.kSpace;

sigma_star = (grapheme | phoneme)*;

bow = (b.kSpace | "[BOS]"); # Beginning of a word.
eow = (b.kSpace | "[EOS]"); # End of a word.

vowels = "a" | "e" | "i" | "o" | "u" | "ā" | "ē" | "ī" | "ō" | "ū";

# These words form an "eu" dipthong, rather than the normal hiatus.                                
eu_exceptions = Optimize[CDRewrite[("heus": "hews") |
                                   ("ceu" : "kew") |
                                   ("neu" : "new") |
                                   ("seu" : "sew") |
                                   ("ēheu" : "eːhew"), bow, eow, sigma_star]];

# These words form an "ou" dipthong, rather than the normal hiatus.
ou_exceptions = Optimize[CDRewrite[("boum": "bowũː") |
                                   ("prout" : "prowt"), bow, eow, sigma_star]];

# These words form an "ui" dipthong, rather than the normal hiatus. 
ui_exceptions = Optimize[CDRewrite[("hui": "huj") |
                                   ("huic" : "hujk") |
                                   ("cui" : "kuj"), bow, eow, sigma_star]];

# These words form an "ei" dipthong, rather than the normal hiatus. 
ei_exceptions = Optimize[CDRewrite[("dein": "dẽːj") |
                                   ("deinde" : "dẽːjde") |
                                   ("deinceps" : "dẽːjkeps") |
                                   ("ei" : "ej") |
                                   ("hei" : "hej"), bow, eow, sigma_star]];

# As a result of the change from Old Latin "quo" and "nguo" to
# "guu" and "nguu," loss of the preceding "u" occured.
u_loss = Optimize[CDRewrite[("nguu": "ngu") |
                            ("quu" : "cu"), "", "", sigma_star]];

qu = Optimize[CDRewrite["qu" : "kw", "", "", sigma_star]];

# When an "i" occurs intervocalically (between two vowels), 
# it is realized as a glide: [jj].
geminate_intervocalic_i = Optimize[CDRewrite["i" : "jj",
                                   vowels - ("i" | "ī"), 
                                   vowels - ("i" | "ī"), sigma_star]];

# The Romans wrote various Greek letters as digraphs: "ph," "ch," and "th."
# Most likely, they were pronounced as [p, k, t], respectively.
digraphs = Optimize[CDRewrite[("ph" : "p") |
                              ("ch" : "k") |
                              ("th" : "t"), "", "", sigma_star]];

# "bs" was pronounced as [ps] and "bt" was pronounced as [pt].
b_devoicing = Optimize[CDRewrite["b" : "p", "", "s" | "t", sigma_star]];

# Word-final "m" and "n" indicates vowel lengthening and nasalization.
nasalization = Optimize[CDRewrite[("a" : "ãː") |
                                   ("e" : "ẽː") |
                                   ("i" : "ĩː") |
                                   ("o" : "õː") |
                                   ("u" : "ũː" ), 
                                   "", ("m" | "n") eow, sigma_star]];
delete_m_n = Optimize[CDRewrite[("m" | "n") : "",
                                "", 
                                eow, sigma_star]];
nasalization_and_elision = Optimize[nasalization @ delete_m_n];

# If "gu" proceeds "n" and precedes a vowel, it is pronounced with a glide.
ngu = Optimize[CDRewrite["gu" : "gw", "n", vowels, sigma_star]];

unconditioned_rewrites = Optimize[CDRewrite[("c" : "k") |
                                            ("x" : "ks") |
                                            ("v" : "w") |
                                            ("y" : "u"), "", "", sigma_star]];

# "n" is pronounced [ŋ] before velar sounds [k, g].
nasal_place_assimilation = Optimize[CDRewrite["n" : "ŋ", "", 
                                              "k" | "g", sigma_star]];

gn = Optimize[CDRewrite[("gn" : "ŋn"), "", "", sigma_star]];

diphthongization = Optimize[CDRewrite[("ae" : "aj") | 
                                      ("oe" : "oj") |
                                      ("au" : "aw"), "", "", sigma_star]];

long_monophthongs = Optimize[CDRewrite[("ā" : "aː") |
                                       ("ē" : "eː") |
                                       ("ī" : "iː") |
                                       ("ō" : "oː") |
                                       ("ū" : "uː") |
                                       ("ȳ" : "uː"), "", "", sigma_star]];

rules = Optimize[eu_exceptions @ ou_exceptions @ ui_exceptions
                @ ei_exceptions @ u_loss @ qu @ geminate_intervocalic_i
                @ digraphs @ b_devoicing @ nasalization_and_elision 
                @ ngu @ unconditioned_rewrites @ nasal_place_assimilation 
                @ gn @ diphthongization @ long_monophthongs];

# Limits input to the graphemes and output to the phonemes.
export PRON = grapheme* @ rules @ phoneme*;

# Tests.
test_pron_1 = AssertEqual[
    "gentis honōs haerent īnfixī pectore vultūs" @ PRON, 
    "gentis honoːs hajrent iːnfiksiː pektore wultuːs"
]; # Testing for macronized vowels, "ae" diphthong, "v," "x," and "c."

test_pron_2 = AssertEqual[
    "heu quianam tantī cīnxērunt aethera nimbī" @ PRON, 
    "heu kwianãː tantiː kiːŋkseːrunt ajtera nimbiː"
]; # Testing for intervocalic "i," "qu," "th," and nasalized "m."

test_pron_3 = AssertEqual[
    "nec tēcum ausonium quīcumque est quaerere thybrim" @ PRON, 
    "nek teːkũː awsoniũː kwiːkumkwe est kwajrere tubrĩː"
]; # Testing for "y."

test_pron_4 = AssertEqual[
    "dīxerat haec adytīs cum lūbricus anguis ab īmīs" @ PRON, 
    "diːkserat hajk adutiːs kũː luːbrikus aŋgwis ab iːmiːs"
]; # Testing for "ng."

test_pron_5 = AssertEqual[
    "centaurō invehitur magnā scyllāque cloanthus" @ PRON, 
    "kentawroː inwehitur maŋnaː skullaːkwe kloantus"
]; # Testing for "gn."

test_pron_6 = AssertEqual[
    "subsīdunt undae tumidumque sub axe tonantī" @ PRON, 
    "supsiːdunt undaj tumidumkwe sub akse tonantiː"
]; # Testing for "bs."

test_pron_7 = AssertEqual[
    "vēlōcem mnēstheus agit ācrī rēmige pristim" @ PRON, 
    "weːloːkẽː mneːsteus agit aːkriː reːmige pristĩː"
]; # Testing to make sure "mnēstheus" does not glide.

test_pron_8 = AssertEqual[
    "ac prior heus inquit juvenēs mōnstrāte meārum" @ PRON, 
    "ak prior hews iŋkwit juweneːs moːnstraːte meaːrũː"
]; # Testing to make sure "heus" glides.

test_pron_9 = AssertEqual[
    "expediunt corpusque lavant frīgentis et unguunt" @ PRON, 
    "ekspediunt korpuskwe lawant friːgentis et uŋgunt"
]; # Testing for "nguu."

test_pron_10 = AssertEqual[
    "prīmus equum phalerīs īnsignem victor habētō" @ PRON, 
    "priːmus ekũː paleriːs iːnsiŋnẽː wiktor habeːtoː"
]; # Testing for "quu."

# TODO:
# • Uncertainty for quīcumque: probably either kwiːkuŋkwe or kwiːkũːkwe.
# • Same for tumidumque.
# • The clitics -que, -ne and -ue should designate eow.
# • When final m was followed by a plosive or nasal consonant, 
#   it was assimilated to the following consonant (doesn't matter for metrics).
