# Converts normalized Latin lines to its broad phonetic transcription.

import 'byte.grm' as b;

# Note: the Romans never used "v" or "j," but some secondary sources do.
graphemes = 
    "a" | "b" | "c" | "d" | "e" | "f" | "g" |
    "h" | "i" | "j" | "k" | "l" | "m" | "n" |
    "o" | "p" | "q" | "r" | "s" | "t" | "u" |
    "v" | "w" | "x" | "y" | "z" | "ā" | "ē" |
    "ī" | "ō" | "ū";

phonemes = 
    "a" | "aː" | "ãː" | "b" | "d" | "e" | "eː" | 
    "ẽː" | "f" | "g" | "h" | "i" | "iː" | "ĩː" |
    "j" | "k" | "kw" | "l" | "m" | "n" | "ŋ" |
    "o" | "oː" | "õː" | "p" | "r" | "s" | "t" |
    "u" | "uː" | "ũː" | "w" | "z";

sigma_star = (graphemes | phonemes | b.kSpace)*;

qu_rule = Optimize[CDRewrite["qu" : "kw", "", "", sigma_star]];

vowels_except_i = "a" | "e" | "o" | "u" | "ā" | "ē" | "ō" | "ū";
intervocalic_i = Optimize[CDRewrite["i" : "jj", vowels_except_i, vowels_except_i, sigma_star]];

digraphs = Optimize[CDRewrite[("ph" : "p") |
                     ("ch" : "k") |
                     ("th" : "t"), "", "", sigma_star]];

rule1_transducer =
    ("c" : "k") |
    ("x" : "ks") |
    ("v" : "w") |
    ("y" : "u");

rule1 = Optimize[CDRewrite[rule1_transducer, "", "", sigma_star]];

b_rule = Optimize[CDRewrite["b" : "p", "", "s" | "t", sigma_star]];

eow = (b.kSpace | "[EOS]"); # End of word.
nasalized_m_n = Optimize[CDRewrite[("a" : "ãː") |
                        ("e" : "ẽː") |
                        ("i" : "ĩː") |
                        ("o" : "õː") |
                        ("u" : "ũː" ), "", ("m" | "n") eow, sigma_star]];
delete_m_n = Optimize[CDRewrite[("m" | "n") : "",
                        "", 
                        eow, sigma_star]];

gu_glide = Optimize[CDRewrite["gu" : "gw", "n", "", sigma_star]];

ng_gn_rules = Optimize[CDRewrite[("ng" : "ŋ") | ("gn" : "ŋn"), "", "", sigma_star]];

diphthongs = Optimize[CDRewrite[("ae" : "aj") | 
                                ("oe" : "oj") |
                                ("au" : "aw"), "", "", sigma_star]];


macrons = Optimize[CDRewrite[("ā" : "aː") |
                      ("ē" : "eː") |
                      ("ī" : "iː") |
                      ("ō" : "oː") |
                      ("ū" : "uː") |
                      ("ȳ" : "uː"), "", "", sigma_star]];

export PRON = Optimize[qu_rule @ intervocalic_i @digraphs
                      @rule1 @b_rule @nasalized_m_n @delete_m_n 
                      @gu_glide @ng_gn_rules @diphthongs @macrons];
# Tests.
test_pron_1 = AssertEqual[
    "gentis honōs haerent īnfixī pectore vultūs" @ PRON, 
    "gentis honoːs hajrent iːnfiksiː pektore wultuːs"
]; # Testing for macronized vowels, "ae" diphthong, "v," "x," and "c."

test_pron_2 = AssertEqual[
    "heu quianam tantī cīnxērunt aethera nimbī" @ PRON, 
    "heu kwianãː tantiː kiːnkseːrunt ajtera nimbiː"
]; # Testing for intervocalic "i," "qu," "th," and nasalized "m."

test_pron_3 = AssertEqual[
    "nec tēcum ausonium quīcumque est quaerere thybrim" @ PRON, 
    "nek teːkũː awsoniũː kwiːkumkwe est kwajrere tubrĩː"
]; # Testing for "y."

test_pron_4 = AssertEqual[
    "dīxerat haec adytīs cum lūbricus anguis ab īmīs" @ PRON, 
    "diːkserat hajk adutiːs kũː luːbrikus aŋwis ab iːmiːs"
]; # Testing for "ng."

test_pron_5 = AssertEqual[
    "centaurō invehitur magnā scyllāque cloanthus" @ PRON, 
    "kentawroː inwehitur maŋnaː skullaːkwe kloantus"
]; # Testing for "gn."

test_pron_6 = AssertEqual[
    "subsīdunt undae tumidumque sub axe tonantī" @ PRON, 
    "supsiːdunt undaj tumidumkwe sub akse tonantiː"
]; # Testing for "bs."

# Uncertainty for quīcumque: either kwiːkuŋkwe or kwiːkũːkwe.
# Uncertainty for tumidumque.

# NOTES TO SELF:
# q is [kw]
# c is [k]
# ae = /aj/ , oe = /oj/, ei = /ej/ , eu = /ew/, au = /aw/, ui depends on position
# x is [ks]
# y = \u\ and ȳ = \uː\
# ng is [ŋ] and gn is [ŋn]
# bs was pronounced [ps]
# i between two vowels, which Pharr usually writes as j, is actually [jj]. u does not count (so apply qu rule first)
# ph, th, and ch = [p, t, k]. 
# Word-final m and n

# cui: [kuj]
# Exceptions: ei and eu glides