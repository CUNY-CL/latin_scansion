# Implements variable sandhi phenomena, such as elision, resyllabification,
# diaeresis, and synizesis.

import 'byte.grm' as b;
import 'inventory.grm' as i;
import 'utility.grm' as u;

sigma_star = (i.PROSODIC_SYMBOL | i.PHONEME | i.MARKUPS)*;

h_deletion = Optimize[
    # Delete medial "h" to permit additional variable rules, if needed (such as synizesis).
    CDRewrite[u.Delete["h"] <1>,
              i.PHONEME - b.kSpace, i.PHONEME - b.kSpace, sigma_star] @
    CDRewrite[("h" : "h̶") <1>,
              "", "", sigma_star]
];

# A final syllable ending in a vowel, letter m, or diphthong is removed
# before a word beginning with a vowel (or an h-).
elision = Optimize[CDRewrite[(("a " : "a̶ ̶") |
                            ("e " : "e̶ ̶") |
                            ("i " : "i̶ ̶") |
                            ("o " : "o̶ ̶") |
                            ("u " : "u̶ ̶") |
                            ("ãː " : "ã̶ː̶ ̶") |
                            ("ẽː " : "ẽ̶ː̶ ̶") |
                            ("ĩː " : "ĩ̶ː̶ ̶") |
                            ("õː " : "õ̶ː̶ ̶") |
                            ("ũː " : "ũ̶ː̶ ̶") |
                            ("aː " : "a̶ː̶ ̶") |
                            ("eː " : "e̶ː̶ ̶") |
                            ("iː " : "i̶ː̶ ̶") |
                            ("oː " : "o̶ː̶ ̶") |
                            ("uː " : "u̶ː̶ ̶") |
                            ("üm " : "ü̶m̶ ̶") |
                            ("oj " : "o̶j̶ ̶") |
                            ("aj " : "a̶j̶ ̶") |
                            ("aw " : "a̶w̶ ̶"))
                            , "", "h̶"? i.PHONEMIC_VOWEL, sigma_star]];

# Word-final consonant reattaches to the following word with an initial vowel.
resyllabification = Optimize[
    CDRewrite[(" " : "‿"),
              i.CONSONANT, "h̶"? i.PHONEMIC_VOWEL, sigma_star]
];

# High vowels may strengthen to their corresponding glides when adjacent to
# another vowel.
synizesis = Optimize[
    CDRewrite[u.Insert["͡"],
              ("i" | "iː" | "u" | "uː") , i.PHONEMIC_VOWEL, sigma_star] @
    CDRewrite[u.Insert["͡"],
             i.PHONEMIC_VOWEL, ("i" | "iː" | "u" | "uː"), sigma_star]
];

# Glides may lenite to their corresponding vowels. 
diaeresis = Optimize[
    CDRewrite[("w" : "ü"),
              "k" | "g", "", sigma_star] @
    # "aw" diphthongs preceding final m may lenite.
    CDRewrite[("w" : "ü"),
              "", "m", sigma_star] @
    CDRewrite[("jj" : "ï"),
              i.PHONEMIC_VOWEL, i.PHONEMIC_VOWEL, sigma_star]
];

# Lengthening of a usually short syllable.
# NB: this is not currently part of the exported VARIABLE cascade.
diastole = Optimize[
    CDRewrite[(("a" : "aː") | ("e" : "eː") | ("i" : "iː") |
              ("o" : "oː") | ("u" : "uː")),
              "", "", sigma_star]
];

export VARIABLE = Optimize[h_deletion @ resyllabification @ elision @
                           synizesis @ diaeresis];

# Tests elision markup
test_elision = AssertEqual[
    "tantajne animiːs" @ elision,
    "tantajne̶ ̶animiːs"
];

# Tests h deletion + elision markup.
test_elision_2 = AssertEqual[
    "atkwe hominũː" @ h_deletion @ elision,
    "atkwe̶ ̶h̶ominũː"
];

# Tests resyllabification markup.
test_resyllabification = AssertEqual[
    "ab oris" @ resyllabification,
    "ab‿oris"
];

# Tests h deletion + resyllabification markup. 
test_h_deletion = AssertEqual[
    "fuit hok" @ h_deletion @ resyllabification,
    "fuit‿h̶ok"
];

# Tests synizesis of "u."
test_synizesis = AssertEqual[
    "suaːsit" @ synizesis,
    "su͡aːsit"
];

# Tests synizesis of "j."
test_synizesis_2 = AssertEqual[
    "laːwiːniakwe" @ synizesis,
    "laːwiːni͡akwe"
];

# Tests synizesis of "j."
test_synizesis_3 = AssertEqual[
    "awreiːs" @ synizesis,
    "awre͡iːs"
];

# Tests diaeresis of intervocalic "j."
test_diaeresis_1 = AssertEqual[
    "troːjja" @ diaeresis,
    "troːïa"
];

## Tests for scansion failures.
test_fail_1 = AssertEqual[
    "nekdũː etiãː kawsaj iːraːrũː sajwiːkwe doloːreːs" @ elision,
    "nekdũ̶ː̶ ̶etiãː kawsa̶j̶ ̶iːraːrũː sajwiːkwe doloːreːs"
];
test_fail_2 = AssertEqual[
    "troːas rellikwiaːs danawm atkwe immiːtis akilliː" @ diaeresis @ elision @ resyllabification,
    "troːas rellikwiaːs danaü̶m̶ ̶atkwe̶ ̶immiːtis‿akilliː"
];
test_fail_3 = AssertEqual[
    "eurũː ad seː zepurũːkwe wokat dehiŋk taːlia faːtur" @ elision @ h_deletion @ synizesis,
    "e͡urũ̶ː̶ ̶ad seː zepurũːkwe wokat de͡iŋk taːlia faːtur"
];
test_fail_4 = AssertEqual[
    "illiː seː prajdaj akkiŋgunt dapibuskwe futuːriːs" @ elision,
    "illiː seː prajda̶j̶ ̶akkiŋgunt dapibuskwe futuːriːs"
];
test_fail_5 = AssertEqual[
    "terga suũː piŋgwiːs kentũː kũː maːtribus aŋnoːs" @ resyllabification,
    "terga suũː piŋgwiːs kentũː kũː maːtribus‿aŋnoːs"
];
test_fail_6 = AssertEqual[
    "kũː subitoː ajneːaːs koŋkursuː akkeːdere maŋnoː" @ elision,
    "kũː subito̶ː̶ ̶ajneːaːs koŋkursu̶ː̶ ̶akkeːdere maŋnoː"
];
test_fail_7 = AssertEqual[
    "doːna kareːre doliːs danawm siːk noːtus ulikseːs" @ diaeresis @ resyllabification,
    "doːna kareːre doliːs danaüm siːk noːtus‿ulikseːs"
];
test_fail_8 = AssertEqual[
    "wellitur hujk aːtroː liːkuntur saŋgwine guttaj" @ h_deletion @ resyllabification,
    "wellitur‿h̶ujk aːtroː liːkuntur saŋgwine guttaj"
];
test_fail_9 = AssertEqual[
    "koːnuːbiiːs arwiːskwe nowiːs operaːta juwentuːs" @ synizesis,
    "koːnuːbi͡iːs arwiːskwe nowiːs operaːta juwentuːs"
];
test_fail_10 = AssertEqual[
    "aːreːbant herbaj et wiːktũː seges ajgra negaːbat" @ elision @ resyllabification,
    "aːreːbant herba̶j̶ ̶et wiːktũː seges‿ajgra negaːbat"
];
test_fail_11 = AssertEqual[
    "kuikwe lokiː leːgeːs dedimus koːnuːbia nostra" @ synizesis @ resyllabification,
    "ku͡ikwe lokiː leːgeːs dedimus‿koːnuːbia nostra"
];
