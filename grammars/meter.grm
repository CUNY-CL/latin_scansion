# Tags the elements of syllables as onsets, nuclei and codas.
# Determines whether syllables are heavy or heavy.
# Maps syllables onto feet: dactyl, spondee, or trochee.
# Defines the hexameter line.

import 'inventory.grm' as i;
import 'byte.grm' as b;
import 'utility.grm' as u;

sigma_star = (i.METER_SYMBOL | i.PHONEME)*;

# Syllable parsing.
long_nucleus = Optimize[u.Rewrite[i.LONG_VOWEL : "–", sigma_star]];

short_nucleus = Optimize[u.Rewrite[i.SHORT_VOWEL : "U", sigma_star]];

onset = Optimize[CDRewrite[(i.CONSONANT_CLUSTER | i.SINGLE_CONSONANT) : "O", "",
                             "–" | "U", sigma_star]];

coda = Optimize[u.Rewrite[i.SINGLE_CONSONANT+ : "C", sigma_star]];

export SYLLABLE_PARSE = Optimize[long_nucleus @ short_nucleus @ onset @ coda];

# Heavy vs. light syllables.
heavy = ("O"?) ("U" "C" | "–" "C"?) : "L";
light = "O"? "U" : "B";
export WEIGHT_PARSE = Optimize[u.Join[(light | heavy)+, " "]];

# Foot types.
dactyl = ("L" " "?) ("B" " "?) ("B" " "?): "D";
spondee = ("L" " "?) ("L" " "?) : "S";
trochee = ("L" " "?) ("B" " "?) : "T";
export FOOT_TYPE = (dactyl | spondee | trochee)*;

# Acceptor that acts as a filter on valid sequences of hexameter feet.
hexameter = Optimize[Project[(dactyl | spondee){5} (spondee | trochee),
                     'output']];

export SCAN = Optimize[SYLLABLE_PARSE @ WEIGHT_PARSE @ FOOT_TYPE @ hexameter];

test_parse_1 = AssertEqual[
  "arma wirũːkwe kanoː trojjaj kwiː priːmus ab oːris" @ SYLLABLE_PARSE,
  "UCOU OUO–OU OUO– OUCOUC O– O–OUC UC –OUC"
];
test_parse_2 = AssertEqual[
  "temperet aː lakrimiːs et jãː noks uːmida kajloː" @ SYLLABLE_PARSE,
  "OUCOUOUC – OUOUO–C UC O– OUC –OUOU OUCO–"
];
test_parse_3 = AssertEqual[
  "ajraːtoːs jamkwe ekskiːsaː trabe firma kawaːwit" @ SYLLABLE_PARSE,
  "UCO–O–C OUCOU UCO–O– OUOU OUCOU OUO–OUC"
];
test_parse_4 = AssertEqual[
  "juːdikiũː paridis spreːtajkwe injuːria formaj" @ SYLLABLE_PARSE,
  "O–OUOU– OUOUOUC O–OUCOU UCO–OUU OUCOUC"
];
test_parse_5 = AssertEqual[
  "faːs awt ille sinit superiː reːŋnaːtor olumpiː" @ SYLLABLE_PARSE,
  "O–C UC UCOU OUOUC OUOUO– O–CO–OUC UOUCO–"
];
test_parse_6 = AssertEqual[
  "tũː bitiaj dedit iŋkrepitaːns ille impiger hawsit" @ SYLLABLE_PARSE,
  "O– OUOUUC OUOUC UCOUOUO–C UCOU UCOUOUC OUCOUC"
];
test_parse_7 = AssertEqual[
  "hajret et interdũː gremioː fowet iːnskia diːdoː" @ SYLLABLE_PARSE,
  "OUCOUC UC UCOUCO– OUOU– OUOUC –COUU O–O–"
];
test_parse_8 = AssertEqual[
  "kũː wenit awlajiːs jãː seː reːgiːna superbiːs" @ SYLLABLE_PARSE,
  "O– OUOUC UCOUO–C O– O– O–O–OU OUOUCO–C"
];

# Tests heavy and light against various syllable types.
test_weight_1 = AssertEqual[
  "OU U" @ WEIGHT_PARSE,
  "B B"
]; # Light syllable types.
test_weight_2 = AssertEqual[
  "O–C O– –C –" @ WEIGHT_PARSE,
  "L L L L"
]; # Heavy by nature.
test_weight_3 = AssertEqual[
  "O–C OUC –C UC" @ WEIGHT_PARSE,
  "L L L L"
]; # Heavy by position.

# Complete foot mapping for "Mūsa, mihī causās memorā, quō nūmine laesō."
test_line_1 = AssertEqual[
  "muːsa mihiː kawsaːs memoraː kwoː nuːmine lajsoː" @ SYLLABLE_PARSE,
  "O–OU OUO– OUCO–C OUOUO– O– O–OUOU OUCO–"
];
test_line_2 = AssertEqual[
  "O–OU OUO– OUCO–C OUOUO– O– O–OUOU OUCO–" @ WEIGHT_PARSE,
  "LB BL LL BBL L LBB LL"
];
test_line_3 = AssertEqual[
  "LB BL LL BBL L LBB LL" @ FOOT_TYPE,
  "DSDSDS"
];
test_scan_1 = AssertEqual[
  "muːsa mihiː kawsaːs memoraː kwoː nuːmine lajsoː" @ SCAN,
  "DSDSDS"
];

# Complete foot mapping for "Urbs antīqua fuit (Tyriī tenuēre colōnī)."
test_line_5 = AssertEqual[
  "urps antiːkwa fuit turiiː tenueːre koloːniː" @ SYLLABLE_PARSE,
  "UC UCO–OU OUUC OUOU– OUOU–OU OUO–O–"
];
test_line_6 = AssertEqual[
  "UC UCO–OU OUUC OUOU– OUOU–OU OUO–O–" @ WEIGHT_PARSE,
  "L LLB BL BBL BBLB BLL"
];
test_line_7 = AssertEqual[
  "L LLB BL BBL BBLB BLL" @ FOOT_TYPE,
  "SDDDDS"
];
test_scan_2= AssertEqual[
  "urps antiːkwa fuit turiiː tenueːre koloːniː" @ SCAN,
  "SDDDDS"
];

# Complete foot mapping for "quidve dolēns rēgīna deum tot volvere cāsūs."
test_line_8 = AssertEqual[
  "kwidwe doleːns reːgiːna deũː tot wolwere kaːsuːs" @ SYLLABLE_PARSE,
  "OUCOU OUO–C O–O–OU OU– OUC OUCOUOU O–O–C"
];
test_line_9 = AssertEqual[
  "OUCOU OUO–C O–O–OU OU– OUC OUCOUOU O–O–C" @ WEIGHT_PARSE,
  "LB BL LLB BL L LBB LL"
];
test_line_10 = AssertEqual[
  "LB BL LLB BL L LBB LL" @ FOOT_TYPE,
  "DSDSDS"
];
test_scan_3 = AssertEqual[
  "kwidwe doleːns reːgiːna deũː tot wolwere kaːsuːs" @ SCAN,
  "DSDSDS"
];

test_defective_1 = AssertNull[
  "kũː siːk uːnanimãː adlokwitur male saːna soroːrẽː" @ SCAN
];
