# Contains poetic license rules without weights, in order to
# test rules individually.

import 'byte.grm' as b;
import 'inventory.grm' as i;
import 'utility.grm' as u;

sigma_star = (i.PROSODIC_SYMBOL | i.PHONEME)*;

h_deletion = Optimize[
    CDRewrite[u.Delete["h"], "", "", sigma_star, 'ltr', 'opt']
];

# A final syllable ending in a vowel, letter m, or diphthong is removed
# before a word beginning with a vowel (or an h-).
elision = Optimize[
    CDRewrite[u.Delete[(i.PHONEMIC_VOWEL | "oj" | "aj" | "aw") " "],
                        "", i.PHONEMIC_VOWEL, sigma_star, 'ltr', 'opt']
];

# Word-final consonant reattaches to the following word with an initial vowel.
# TODO: orthographically annotate using "‿".
resyllabification = Optimize[
    CDRewrite[u.Insert[" "], "", i.CONSONANT " " i.PHONEMIC_VOWEL, sigma_star, 'ltr', 'opt'] @
    CDRewrite[u.Delete[" "], " " i.CONSONANT, i.PHONEMIC_VOWEL, sigma_star]
];

synizesis = Optimize[
    # The consonantization of i and u into their corresponding glides, [j] and [w].
    CDRewrite[("i" : "j") | ("u" : "w"),
              "", i.PHONEMIC_VOWEL, sigma_star, 'ltr', 'opt'] @
    # A hiatus becomes a diphthong.
    CDRewrite[("i" : "j") | ("u" : "w"),
              i.PHONEMIC_VOWEL, "", sigma_star, 'ltr', 'opt']
];

# The vowels [i] and [u] are pronounced as separate syllables, instead of
# the normal glides, [j] and [w].
# TODO: include [j] glide?
diaeresis = Optimize[
    CDRewrite[("w" : "u"), "k" | "g", "", sigma_star, 'ltr', 'opt']
];

# The lengthening of a usually short syllable.
diastole = Optimize[
    CDRewrite[("a" : "aː") | ("e" : "eː") | ("i" : "iː") | ("o" : "oː") | ("u" : "uː"),
              "", "", sigma_star, 'ltr', 'opt']
];

export OPTIONAL = Optimize[h_deletion @ elision @ resyllabification @ synizesis @ diaeresis];

## Resyllabification tests.

# Jūnōnis ob īram.
test_without_resyllabify_1 = AssertEqual[
    "wiː superũː sajwaj memorẽː juːnoːnis ob iːrãː" @ resyllabification,
    "wiː superũː sajwaj memorẽː juːnoːnis ob iːrãː"
];
test_with_resyllabify_1 = AssertEqual[
    "wiː superũː sajwaj memorẽː juːnoːnis ob iːrãː" @ resyllabification,
    "wiː superũː sajwaj memorẽː juːnoːni so biːrãː"
];

# conderet urbem.
test_without_resyllabify_2 = AssertEqual[
    "multa kwokwe et belloː passus dũː konderet urbẽː" @ resyllabification,
    "multa kwokwe et belloː passus dũː konderet urbẽː"
];
test_with_resyllabify_2 = AssertEqual[
    "multa kwokwe et belloː passus dũː konderet urbẽː" @ resyllabification,
    "multa kwokwe et belloː passus dũː kondere turbẽː"
];

## Elision tests.

test_without_elision_2 = AssertEqual[
    "impulerit tantajne animiːs kajlestibus iːraj" @ elision,
    "impulerit tantajne animiːs kajlestibus iːraj"
];
test_with_elision_2 = AssertEqual[
    "impulerit tantajne animiːs kajlestibus iːraj" @ elision,
    "impulerit tantajnanimiːs kajlestibus iːraj"
];

test_without_elision_3 = AssertEqual[
    "liːtora multũː ille et terriːs jaktaːtus et altoː" @ elision,
    "liːtora multũː ille et terriːs jaktaːtus et altoː"
];
test_with_elision_3 = AssertEqual[
    "liːtora multũː ille et terriːs jaktaːtus et altoː" @ elision,
    "liːtora multille et terriːs jaktaːtus et altoː"
];

test_without_elision_4 = AssertEqual[
    "nekdũː etiãː kawsaj iːraːrũː sajwiːkwe doloːreːs" @ elision,
    "nekdũː etiãː kawsaj iːraːrũː sajwiːkwe doloːreːs"
];
test_with_elision_4 = AssertEqual[
    "nekdũː etiãː kawsaj iːraːrũː sajwiːkwe doloːreːs" @ elision,
    "nekdetiãː kawsiːraːrũː sajwiːkwe doloːreːs"
];

## Synizesis tests.
test_without_synizesis_1 = AssertEqual[
    "iːtaliãː faːtoː profugus laːwiːniakwe weːnit" @ synizesis,
    "iːtaliãː faːtoː profugus laːwiːniakwe weːnit"
];
test_with_synizesis_1 = AssertEqual[
    "iːtaliãː faːtoː profugus laːwiːniakwe weːnit" @ synizesis,
    "iːtaliãː faːtoː profugus laːwiːnjakwe weːnit"
];
test_without_synizesis_2 = AssertEqual[
    "koːnuːbioː juŋgãː stabiliː propriãːkwe dikaːboː" @ synizesis,
    "koːnuːbioː juŋgãː stabiliː propriãːkwe dikaːboː"
];
test_with_synizesis_2 = AssertEqual[
    "koːnuːbioː juŋgãː stabiliː propriãːkwe dikaːboː" @ synizesis,
    "koːnuːbjoː juŋgãː stabiliː propriãːkwe dikaːboː"
];

## Diaeresis tests.
test_without_diaeresis_1 = AssertEqual[
    "relaŋgwit" @ diaeresis,
    "relaŋgwit"
];
test_with_diaeresis_1 = AssertEqual[
    "relaŋgwit" @ diaeresis,
    "relaŋguit"
];

## Diastole tests.

test_without_diastole_1 = AssertEqual[
    "iːnferretkwe deos latio genus unde latiːnũː" @ diastole,
    "iːnferretkwe deos latio genus unde latiːnũː"
];
test_with_diastole_1 = AssertEqual[
    "iːnferretkwe deos latio genus unde latiːnũː" @ diastole,
    "iːnferretkwe deos latioː genus unde latiːnũː"
];

## Combined OPTIONAL tests.

# Resyllabification and elision.
test_without_optional_1 = AssertEqual[
    "oːstia diːwes opũː studiiːskwe asperrima belliː" @ OPTIONAL,
    "oːstia diːwes opũː studiiːskwe asperrima belliː"
];
test_with_optional_1 = AssertEqual[
    "oːstia diːwes opũː studiiːskwe asperrima belliː" @ OPTIONAL,
    "oːstia diːwe sopũː studiiːskwasperrima belliː"
];

# H deletion and synizesis.
test_without_optional_2 = AssertEqual[
    "eurũː ad seː zepurumkwe wokat dehiŋk taːlia faːtur" @ OPTIONAL,
    "eurũː ad seː zepurumkwe wokat dehiŋk taːlia faːtur"
];
test_with_optional_2 = AssertEqual[
    "eurũː ad seː zepurumkwe wokat dehiŋk taːlia faːtur" @ OPTIONAL,
    "eurũː ad seː zepurumkwe wokat dejŋk taːlia faːtur"
];

# H deletion and resyllabification.
test_without_optional_3 = AssertEqual[
    "hiːk kurrus fuit hok reːŋnũː dea gentibus esse" @ OPTIONAL,
    "hiːk kurrus fuit hok reːŋnũː dea gentibus esse"
];
test_with_optional_3 = AssertEqual[
    "hiːk kurrus fuit hok reːŋnũː dea gentibus esse" @ OPTIONAL,
    "hiːk kurrus fui tok reːŋnũː dea gentibu sesse"
];

# H deletion + elision.
test_without_elision_1 = AssertEqual[
    "ajole namkwe tibiː diːwũː pater atkwe hominũː reːks" @ OPTIONAL,
    "ajole namkwe tibiː diːwũː pater atkwe hominũː reːks"
];
test_with_elision_1 = AssertEqual[
    "ajole namkwe tibiː diːwũː pater atkwe hominũː reːks" @ OPTIONAL,
    "ajole namkwe tibiː diːwũː pater atkwominũː reːks"
];
