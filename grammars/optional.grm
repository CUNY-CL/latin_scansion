# Implements sandhi phenomena, such as elision, resyllabification,
# diaeresis, synizesis, hypermetric lengthening, etc.

import 'byte.grm' as b;
import 'inventory.grm' as i;
import 'utility.grm' as u;

sigma_star = (i.PROSODIC_SYMBOL | i.PHONEME)*;

# A final syllable ending in a vowel or letter m is removed
# before a word beginning with a vowel (or an h-).
export ELISION = Optimize[
    CDRewrite[u.Delete[i.PHONEMIC_VOWEL " " "h"?], "", "h"? i.PHONEMIC_VOWEL,
                       sigma_star, 'ltr', 'opt']
];

# Word-final consonant reattaches to the following word with an initial vowel.
# TODO: orthographically annotate using "‿".
export RESYLLABIFY = Optimize[
    CDRewrite[u.Insert[" "], "", i.CONSONANT " " i.PHONEMIC_VOWEL, sigma_star, 'ltr', 'opt'] @
    CDRewrite[u.Delete[" "], " " i.CONSONANT, i.PHONEMIC_VOWEL, sigma_star]
];

# The consonantization of i and u into their corresponding glides, [j] and [w].
export SYNIZESIS = Optimize[
    CDRewrite[("i" : "j") |
              ("u" : "w"), "", i.SHORT_VOWEL, sigma_star, 'ltr', 'opt']
];

# The vowels [i] and [u] are pronounced as separate syllables, instead of
# the normal glides, [j] and [w].
# TODO: include [j] glide?
export DIAERESIS = Optimize[
    CDRewrite[("w" : "u"), "k" | "g", "", sigma_star, 'ltr', 'opt']
];

export OPTIONAL = Optimize[ELISION @ RESYLLABIFY @ SYNIZESIS @ DIAERESIS];

## Resyllabification tests.

# Jūnōnis ob īram.
test_without_resyllabify_1= AssertEqual[
    "wiː superũː sajwaj memorẽː juːnoːnis ob iːrãː" @ RESYLLABIFY,
    "wiː superũː sajwaj memorẽː juːnoːnis ob iːrãː"
];
test_with_resyllabify_1 = AssertEqual[
    "wiː superũː sajwaj memorẽː juːnoːnis ob iːrãː" @ RESYLLABIFY,
    "wiː superũː sajwaj memorẽː juːnoːni so biːrãː"
];

# conderet urbem.
test_without_resyllabify_2 = AssertEqual[
    "multa kwokwe et belloː passus dũː konderet urbẽː" @ RESYLLABIFY,
    "multa kwokwe et belloː passus dũː konderet urbẽː"
];
test_with_resyllabify_2 = AssertEqual[
    "multa kwokwe et belloː passus dũː konderet urbẽː" @ RESYLLABIFY,
    "multa kwokwe et belloː passus dũː kondere turbẽː"
];

## Elision tests.

test_without_elision_1 = AssertEqual[
    "ajole namkwe tibiː diːwũː pater atkwe hominũː reːks" @ ELISION,
    "ajole namkwe tibiː diːwũː pater atkwe hominũː reːks"
];
test_with_elision_1 = AssertEqual[
    "ajole namkwe tibiː diːwũː pater atkwe hominũː reːks" @ ELISION,
    "ajole namkwe tibiː diːwũː pater atkwominũː reːks"
];

test_without_elision_2= AssertEqual[
    "impulerit tantajne animiːs kajlestibus iːraj" @ ELISION,
    "impulerit tantajne animiːs kajlestibus iːraj"
];
test_with_elision_2 = AssertEqual[
    "impulerit tantajne animiːs kajlestibus iːraj" @ ELISION,
    "impulerit tantajnanimiːs kajlestibus iːraj"
];

test_without_elision_3= AssertEqual[
    "liːtora multũː ille et terriːs jaktaːtus et altoː" @ ELISION,
    "liːtora multũː ille et terriːs jaktaːtus et altoː"
];
test_with_elision_3 = AssertEqual[
    "liːtora multũː ille et terriːs jaktaːtus et altoː" @ ELISION,
    "liːtora multille et terriːs jaktaːtus et altoː"
];

## Synizesis tests.
test_without_synizesis_1= AssertEqual[
    "iːtaliãː faːtoː profugus laːwiːniakwe weːnit" @ SYNIZESIS,
    "iːtaliãː faːtoː profugus laːwiːniakwe weːnit"
];
test_with_synizesis_1 = AssertEqual[
    "iːtaliãː faːtoː profugus laːwiːniakwe weːnit" @ SYNIZESIS,
    "iːtaliãː faːtoː profugus laːwiːnjakwe weːnit"
];

## Diaeresis tests.
test_without_diaeresis_1= AssertEqual[
    "relaŋgwit" @ DIAERESIS,
    "relaŋgwit"
];
test_with_diaeresis_1 = AssertEqual[
    "relaŋgwit" @ DIAERESIS,
    "relaŋguit"
];

## Combined OPTIONAL tests.

# Resyllabification and elision.
test_without_optional_3 = AssertEqual[
    "oːstia diːwes opũː studiiːskwe asperrima belliː" @ OPTIONAL,
    "oːstia diːwes opũː studiiːskwe asperrima belliː"
];
test_with_optional_3 = AssertEqual[
    "oːstia diːwes opũː studiiːskwe asperrima belliː" @ OPTIONAL,
    "oːstia diːwe sopũː studiiːskwasperrima belliː"
];

# TODOs:
# * Silent "h"s: "eurũː ad seː zepurumkwe wokat dehiŋk taːlia faːtur"
# * Hypermeter: when a period has an extra syllable ending in a vowel
#   or m which is elided into the first word of the following period (1.448)
# * Diastole: a usually short syllable is long.
#   The second syllables of mihi, tibi, sibi, ubi, and ibi are often lengthened in poetry.
#   He also lengthens other syllables not usually lengthened
#   (qui teneant, nam inculta videt, hominesne feraene)