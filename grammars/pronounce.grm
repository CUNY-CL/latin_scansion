# Converts normalized Latin lines to its broad phonetic transcription.
#
# Most of the rules are documented in:
#
# Allen, W. Sidney. 1978. Vox Latina: A Guide to the Pronunciation of
# Classical Latin. 2nd edition. Cambridge University Press.

import 'byte.grm' as b;
import 'inventory.grm' as i;
import 'utility.grm' as u;

sigma_star = (i.GRAPHEME | i.PHONEME)*;

# As a result of the change from Old Latin "quo" and "nguo" to
# "guu" and "nguu," loss of the preceding "u" occured.
u_loss = Optimize[u.Rewrite[("nguu": "ngu") | ("quu" : "ku"), sigma_star]];

qu = Optimize[u.Rewrite["qu" : "kw", sigma_star]];

## Handling of vowels, glides, and diphthongs.

# These words form an "eu" diphthong, rather than the normal hiatus.
eu_exceptions = Optimize[u.RewriteWord[("heus": "hews") |
                                       ("ceu" : "kew") |
                                       ("neu" : "new") |
                                       ("seu" : "sew") |
                                       ("ēheu" : "eːhew"), sigma_star]];

# These words form an "ou" diphthong, rather than the normal hiatus.
ou_exceptions = Optimize[u.RewriteWord[("boum": "bowũː") |
                                       ("prout" : "prowt"),
                                       sigma_star]];

# These words form an "ui" diphthong, rather than the normal hiatus.
ui_exceptions = Optimize[u.RewriteWord[("hui": "huj") |
                                       ("huic" : "hujk") |
                                       ("cui" : "kuj"),
                                       sigma_star]];

# These words form an "ei" diphthong, rather than the normal hiatus.
ei_exceptions = Optimize[u.RewriteWord[("dein": "dẽːj") |
                                       ("deinde" : "dẽːjde") |
                                       ("deinceps" : "dẽːjkeps") |
                                       ("ei" : "ej") |
                                       ("hei" : "hej"),
                                       sigma_star]];

# When an "i" occurs intervocalically (between two vowels),
# it is realized as a glide: [jj]. Pharr writes intervocalic "i" as "j."
geminate_intervocalic_i = Optimize[CDRewrite["j" : "jj",
                                             i.PHONEMIC_VOWEL, i.PHONEMIC_VOWEL, sigma_star]];

diphthongization = Optimize[u.Rewrite[("ae" : "aj") |
                                      ("oe" : "oj") |
                                      ("au" : "aw"),
                                      sigma_star]];

# Diaeresis, indicating hiatus, no longer needs to be marked
# after diphthong formation.
diaeresis = Optimize[u.Rewrite[("ä" : "a") |
                               ("ë" : "e") |
                               ("ï" : "i") |
                               ("ö" : "o") |
                               ("ü" : "u"),
                               sigma_star]];

long_monophthongs = Optimize[u.Rewrite[("ā" : "aː") |
                                       ("ē" : "eː") |
                                       ("ī" : "iː") |
                                       ("ō" : "oː") |
                                       ("ū" : "uː") |
                                       ("ȳ" : "uː"),
                                       sigma_star]];

## Consonantal matters.

# The Romans wrote various Greek letters as digraphs: "ph," "ch," and "th."
# Most likely, they were pronounced as [p, k, t], respectively.
digraphs = Optimize[u.Rewrite[("ph" : "p") |
                              ("ch" : "k") |
                              ("th" : "t"),
                              sigma_star]];

# "bs" was pronounced as [ps] and "bt" was pronounced as [pt].
b_devoicing = Optimize[CDRewrite["b" : "p", "", "s" | "t", sigma_star]];

# Word-final "m" and "n" indicates vowel lengthening and nasalization.
# TODO: This likely overapplies to stems that happen to end in -que.
nasalization = Optimize[CDRewrite[("a" : "ãː") |
                                  ("e" : "ẽː") |
                                  ("i" : "ĩː") |
                                  ("o" : "õː") |
                                  ("u" : "ũː" ),
                                  "",
                                  ("m" | "n") "que"? i.EOW,
                                  sigma_star] @
    CDRewrite[("m" | "n") : "", "", "que"? i.EOW, sigma_star]
];

# If "gu" proceeds "n" and precedes a vowel, it is pronounced with a glide.
ngu = Optimize[CDRewrite["gu" : "gw", "n", i.VOWEL, sigma_star]];

unconditioned_rewrites = Optimize[u.Rewrite[("c" : "k") |
                                            ("x" : "ks") |
                                            ("v" : "w") |
                                            ("y" : "u"),
                                            sigma_star]];

# "n" is pronounced [ŋ] before velars [k, g].
nasal_place_assimilation = Optimize[CDRewrite["n" : "ŋ", "",
                                              "k" | "g", sigma_star]];

# Initial "gn" was likely pronounced [g], elsewhere [ŋn].
gn = Optimize[
    CDRewrite["gn" : "n", i.BOW, "", sigma_star] @
    u.Rewrite[("gn" : "ŋn"), sigma_star]
];

rules = Optimize[
    u_loss @ nasalization @ qu @ eu_exceptions @
    ou_exceptions @ ui_exceptions @ ei_exceptions @
    digraphs @ diphthongization @ diaeresis @ long_monophthongs @
    b_devoicing @ ngu @ unconditioned_rewrites @
    geminate_intervocalic_i @ nasal_place_assimilation @ gn
];

# Constrains input to the graphemes and output to the phonemes.
export PRONOUNCE = Optimize[u.FilterRule[rules, i.GRAPHEME, i.PHONEME]];

## Tests.

# Tests for macronized vowels, "ae" diphthong, "v," "x," and "c."
test_pron_1 = AssertEqual[
    "gentis honōs haerent īnfixī pectore vultūs" @ PRONOUNCE,
    "gentis honoːs hajrent iːnfiksiː pektore wultuːs"
];

# Tests for intervocalic "i," "qu," "th," and nasalized "m."
test_pron_2 = AssertEqual[
    "heu quianam tantī cīnxērunt aethera nimbī" @ PRONOUNCE,
    "heu kwianãː tantiː kiːŋkseːrunt ajtera nimbiː"
];

# Tests for "y."
test_pron_3 = AssertEqual[
    "nec tēcum ausonium quīcumque est quaerere thybrim" @ PRONOUNCE,
    "nek teːkũː awsoniũː kwiːkũːkwe est kwajrere tubrĩː"
];

# Tests for "ng."
test_pron_4 = AssertEqual[
    "dīxerat haec adytīs cum lūbricus anguis ab īmīs" @ PRONOUNCE,
    "diːkserat hajk adutiːs kũː luːbrikus aŋgwis ab iːmiːs"
];

# Tests for "gn."
test_pron_5 = AssertEqual[
    "centaurō invehitur magnā scyllāque cloanthus" @ PRONOUNCE,
    "kentawroː inwehitur maŋnaː skullaːkwe kloantus"
];

# Tests for "bs".
test_pron_6 = AssertEqual[
    "subsīdunt undae tumidumque sub axe tonantī" @ PRONOUNCE,
    "supsiːdunt undaj tumidũːkwe sub akse tonantiː"
];

# Tests "mnēstheus" does not glide.
test_pron_7 = AssertEqual[
    "vēlōcem mnēstheus agit ācrī rēmige pristim" @ PRONOUNCE,
    "weːloːkẽː mneːsteus agit aːkriː reːmige pristĩː"
];

# Tests "heus" glides.
test_pron_8 = AssertEqual[
    "ac prior heus inquit juvenēs mōnstrāte meārum" @ PRONOUNCE,
    "ak prior hews iŋkwit juweneːs moːnstraːte meaːrũː"
];

# Tests "nguu."
test_pron_9 = AssertEqual[
    "expediunt corpusque lavant frīgentis et unguunt" @ PRONOUNCE,
    "ekspediunt korpuskwe lawant friːgentis et uŋgunt"
];

# Tests "quu."
test_pron_10 = AssertEqual[
    "prīmus equum phalerīs īnsignem victor habētō" @ PRONOUNCE,
    "priːmus ekũː paleriːs iːnsiŋnẽː wiktor habeːtoː"
];

# Tests the removal of the diaeresis.
test_pron_11 = AssertEqual[
    "alma venus phrygiī genuit simoëntis ad undam" @ PRONOUNCE,
    "alma wenus prugiiː genuit simoentis ad undãː"
];

## Tests intervocalic "i".
test_pron_12 = AssertEqual[
    "hōc equidem occāsum trojae trīstīsque ruīnās" @ PRONOUNCE,
    "hoːk ekwidẽː okkaːsũː trojjaj triːstiːskwe ruiːnaːs"
];
test_pron_13 = AssertEqual[
    "arma virumque canō trojae quī prīmus ab ōris" @ PRONOUNCE,
    "arma wirũːkwe kanoː trojjaj kwiː priːmus ab oːris"
];
test_pron_14 = AssertEqual[
    "prīma quod ad trojam prō cāris gesserat argīs" @ PRONOUNCE,
    "priːma kwod ad trojjãː proː kaːris gesserat argiːs"
];

# Tests word initial "gn."
test_pron_15 = AssertEqual[
    "plācēmus ventōs et gnōsia rēgna petāmus" @ PRONOUNCE,
    "plaːkeːmus wentoːs et noːsia reːŋna petaːmus"
];

# Tests diphthong followed by a short vowel.
test_pron_16 = AssertEqual[
    "aeoliam venit hīc vastō rēx aeolus antrō" @ PRONOUNCE,
    "ajjoliãː wenit hiːk wastoː reːks ajjolus antroː"
];

# TODO:
# * Uncertainty about quīcumque: either kwiːkuŋkwe or kwiːkũːkwe?
# * The clitics -que, -ne and -ue should act like the end of a word.
# * When final m was followed by a plosive or nasal consonant,
#   it likely was assimilated to the following consonant.
